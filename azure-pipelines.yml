# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
- name: TestResultsFile
  value: $(Build.ArtifactStagingDirectory)/unittests.xml
- name: CodeCoverageFile
  value: $(Build.ArtifactStagingDirectory)/codecoverage.xml


steps:
- task: DockerCompose@0
  displayName: 'Start Concourse'
  inputs:
    containerregistrytype: 'Container Registry'
    dockerComposeFile: 'docker-compose.yml'
    action: 'Run a Docker Compose command'
    dockerComposeCommand: 'up -d'
- task: PowerShell@2
  displayName: 'Pester Tests'
  inputs:
    targetType: 'inline'
    script: |
      Install-Module Pester -Force
      Import-Module Pester -Force
      $ProgressPreference = "SilentlyContinue"
      $verbosePreference = "Continue"
      Invoke-Pester -Path test -Verbose -OutputFile $(TestResultsFile) -OutputFormat NUnitXML -CodeCoverage $(Build.SourcesDirectory)/concourse.psm1 -CodeCoverageOutputFile $(CodeCoverageFile) -Show All
    failOnStderr: true
    pwsh: true
- task: DockerCompose@0
  displayName: 'Stop Concourse'
  condition: always()
  inputs:
    containerregistrytype: 'Container Registry'
    dockerComposeFile: 'docker-compose.yml'
    action: 'Run a Docker Compose command'
    dockerComposeCommand: 'down'
- task: PublishTestResults@2
  name: TestResults
  displayName: Publish Unit Test Results
  condition: always()
  inputs:
    testResultsFormat: NUnit
    testResultsFiles: $(TestResultsFile)
- task: PublishCodeCoverageResults@1
  inputs:
    #codeCoverageTool: 'JaCoCo' # Options: cobertura, jaCoCo
    summaryFileLocation: $(CodeCoverageFile)
    #pathToSources: # Optional
    #reportDirectory: # Optional
    #additionalCodeCoverageFiles: # Optional
    #failIfCoverageEmpty: false # Optional
- task: PowerShell@2
  displayName: 'Code Review'
  inputs:
    targetType: 'inline'
    script: |
      Install-Module PSScriptAnalyzer -Force
      $codeReview = Invoke-ScriptAnalyzer -Path . -IncludeDefaultRules -RecurseCustomRulePath
      write-output $codeReview
      if(($codeReview |  Where-Object{$_.Severity -eq "Error"}).Count -gt 0) {
          Exit 1
      }
    failOnStderr: true
    pwsh: true

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Pipeline.Workspace)'
    artifact: 'concourse-artifacts'